(function (window) {
  'use strict';

  window.fillMetadataStore = fillMetadataStore;

  /////// Create and configure a Metadata-Helper instance //////////

  // 'Identity' is the default key generation strategy for this app
  var keyGen = breeze.AutoGeneratedKeyType.Identity;
  // namespace of the corresponding classes on the server
  var namespace = 'Contentai.TableData.Models';

  // Breeze Labs: breeze.metadata.helper.js
  // https://github.com/IdeaBlade/Breeze/blob/master/Breeze.Client/Scripts/Labs/breeze.metadata-helper.js
  // The helper reduces data entry by applying common conventions
  // and converting common abbreviations (e.g., 'type' -> 'dataType')
  var helper = new breeze.config.MetadataHelper(namespace, keyGen);

  /////////////////
  function fillMetadataStore(store) {

    // DataTypes
    var DT = breeze.DataType;
    var BOOL = DT.Boolean;
    var DATE = DT.DateTime;
    var ID = DT.Int32;
    var INT = DT.Int32;
    var DOUBLE = DT.Double;

    // type order is irrelevant
    addStatus();
    addRipeInfo();
    
    // addType - make it easy to add the type to the store using the helper
    function addType(type) {
      helper.addTypeToStore(store, type);
    }

    function addStatus() {
      addType({
        name: 'Status',
        dataProperties: {
          id: { type: ID },
          crawling: { type: BOOL },
          currentRange: { max: 50},
          uniqueCompanies: { type: INT},
          ipsPerSecond: { type: DOUBLE },
          ipsCrawled: { type: INT },
          cvrMatched: { type: INT },
          runMatcher: { type: BOOL },
          runCrawler: { type: BOOL },
        }
      });
    }

    function addRipeInfo() {
      addType({
        name: 'RipeInfo',
        dataProperties: {
          id: { max:32 },
          name: { max: 50 },
          isCvrMatched: {type:BOOL}
        }
      });
    }

  }
})(window);